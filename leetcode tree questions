/872. Leaf-Similar Trees
def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        l=[]
        a=[]
        def solve(r,l):
            if r==None:
                return
            if r.left==None and r.right==None:
                l.append(r.val)
                return 
            solve(r.left,l)
            solve(r.right,l)
        solve(root1,l)
        solve(root2,a)
        return  l==a
  
  /113. Path Sum II
   def pathSum(self, root: Optional[TreeNode], target: int) -> List[List[int]]: 
        ans=[]
        l=[]
        def solve(a,s,l):
            print(l,s)
            if a==None:
                return
            l.append(a.val) 
            s=s-a.val
            if a.left==None and a.right==None and s==0:
                ans.append(l.copy())
                print(l,s)
                l.pop()
                return
            solve(a.left,s,l.copy())
            solve(a.right,s,l.copy())
        solve(root,target,l)
        return ans
/1026 -maximum-difference-between-node-and-ancestor
        def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        ans=[]
        minn=[]
        maxx=[]
        minn.append(float("inf"))
        maxx.append(float("-inf"))
        def solve(a,minn,maxx):
            if a==None :    
                print(minn,maxx)           
                ans.append(abs(maxx[0]-minn[0]))
                return
            minn[0]=min(minn[0],a.val)
            maxx[0]=max(maxx[0],a.val)
            solve(a.left,minn.copy(),maxx.copy())
            minn[0]=min(minn[0],a.val)
            maxx[0]=max(maxx[0],a.val)
            solve(a.right,minn,maxx)
        solve(root,minn,maxx)
        print(ans)
        return max(ans)
